/* CTF 1.8 */
typealias integer { size = 8; align = 8; signed = false; } := uint8_t;
typealias integer { size = 8; align = 8; signed = false; } := uint8_t;
typealias integer { size = 16; align = 8; signed = false; } := uint16_t;
typealias integer { size = 32; align = 8; signed = false; } := uint32_t;
typealias integer { size = 64; align = 8; signed = false; } := uint64_t;
typealias integer { size = 64; align = 8; signed = false; } := unsigned long;
typealias integer { size = 5; align = 1; signed = false; } := uint5_t;
typealias integer { size = 27; align = 1; signed = false; base = x; } := uint27_t;

trace {
    major = 1;
    minor = 8;
    byte_order = be;
    uuid = "fa3cf4f6-9abd-dd42-b220-4d2b440b10e4";
    packet.header := struct {
        uint32_t magic;
        uint8_t  uuid[16];
        uint32_t stream_id;
    };
};

env {
    hostname = "archeepp";
    domain = "kernel";
    sysname = "Linux";
    kernel_release = "3.17.0-rc3-ARCH-lttng-00083-g57b252f-dirty";
    kernel_version = "#2 SMP PREEMPT Thu Sep 4 18:57:15 EDT 2014";
    tracer_name = "lttng-modules";
    tracer_major = 2;
    tracer_minor = 5;
    tracer_patchlevel = 0;
};

clock {
    name = monotonic;
    uuid = "8ca2ea5b-9331-430c-b2bc-414a9989c5f5";
    description = "Monotonic Clock";
    freq = 1000000000; /* Frequency, in Hz */
    /* clock value offset from Epoch is: offset * (1/freq) */
    offset = 1410027325724524018;
    offset_s = 29387928332;
    absolute = FALSE;
};

typealias integer {
    size = 27; align = 1; signed = false;
    map = clock.monotonic.value;
} := uint27_clock_monotonic_t;

typealias integer {
    size = 32; align = 8; signed = false;
    map = clock.monotonic.value;
} := uint32_clock_monotonic_t;

typealias integer {
    size = 64; align = 8; signed = false;
    map = clock.monotonic.value;
} := uint64_clock_monotonic_t;

struct packet_context {
    uint64_clock_monotonic_t timestamp_begin;
    uint64_clock_monotonic_t timestamp_end;
    uint64_t content_size;
    uint64_t packet_size;
    unsigned long events_discarded;
    uint32_t cpu_id;
};

struct event_header_compact {
    enum : uint5_t { compact = 0 ... 30, extended = 31 } id;
    variant <id> {
        struct {
            uint27_clock_monotonic_t timestamp;
        } compact;
        struct {
            uint32_t id;
            uint64_clock_monotonic_t timestamp;
        } extended;
    } v;
} align(8);

stream {
    id = 0;
    event.header := struct event_header_compact;
};

stream {
    id = 1;
    event.header := string;
    event.context := integer {
        align = 8;
        size = 5;
        encoding = UTF8;
    };
};

event {
    name = "simple_event";
    id = 0;
    stream_id = 0;
    fields := integer {
        size = 12;
    };
};

event {
    name = "other event";
    id = 23;
    stream_id = 0;
    fields := struct {
        string a;
        uint16_t b;
    } align(64);
};

event {
    name = "some_event";
    id = 0;
    stream_id = 1;

    variant named_variant {
        uint32_t ZERO;
        string {encoding = ASCII;} ONE;
        struct {
            unsigned long field[10];
        } align(16) ELEVEN;
    };

    fields := struct {
        struct a {
            unsigned long a;
            unsigned long b[23];
        } _some_field;

        typealias enum : unsigned long {
            ZERO,
            ONE,
            TWO,
            "the TEN" = 10,
            ELEVEN,
            "SOME RANGE" = 30...152,
        } := my_enum;

        struct a _field;
        struct a _field2[stream.event.header.id][150];
        my_enum _state;
        variant named_variant <_state> _yeah;
    };
};
